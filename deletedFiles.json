[
  {
    "source": "server/api/@types/models.ts",
    "content": "export type UserModel = {\n  id: string;\n  email: string;\n  name: string;\n  createdTime: number;\n};\n\nexport type TaskModel = {\n  id: string;\n  label: string;\n  done: boolean;\n  createdTime: number;\n  image: { url: string; s3Key: string } | undefined;\n  author: { userId: string; name: string };\n};\n"
  },
  {
    "source": "server/api/controller.ts",
    "content": "import { defineController } from './$relay';\n\nexport default defineController(() => ({\n  get: () => ({ status: 200, body: '' }),\n}));\n"
  },
  {
    "source": "server/api/health/controller.ts",
    "content": "import { prismaClient } from '$/service/prismaClient';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  get: async () => ({\n    status: 200,\n    body: {\n      server: 'ok',\n      db: await prismaClient.$queryRaw`SELECT CURRENT_TIMESTAMP;`.then(() => 'ok' as const),\n    },\n  }),\n}));\n"
  },
  {
    "source": "server/api/health/index.ts",
    "content": "import type { DefineMethods } from 'aspida';\n\nexport type Methods = DefineMethods<{\n  get: {\n    resBody: Record<'server' | 'db', 'ok'>;\n  };\n}>;\n"
  },
  {
    "source": "server/api/index.ts",
    "content": "import type { DefineMethods } from 'aspida';\n\nexport type Methods = DefineMethods<{\n  get: {\n    resBody: string;\n  };\n}>;\n"
  },
  {
    "source": "server/api/private/controller.ts",
    "content": "import { defineController } from './$relay';\n\nexport default defineController(() => ({\n  get: () => ({ status: 200, body: 'Hello' }),\n}));\n"
  },
  {
    "source": "server/api/private/hooks.ts",
    "content": "import type { JwtUser } from '$/domain/model/userModel';\nimport { userRepo } from '$/domain/repository/userRepo';\nimport type { JWT_PROP_NAME } from '$/service/constants';\nimport { prismaClient } from '$/service/prismaClient';\nimport assert from 'assert';\nimport type { UserModel } from '../@types/models';\nimport { defineHooks } from './$relay';\n\nexport type AdditionalRequest = {\n  [Key in typeof JWT_PROP_NAME]: JwtUser;\n} & { user: UserModel };\n\nexport default defineHooks(() => ({\n  onRequest: async (req, res) => {\n    try {\n      await req.jwtVerify({ onlyCookie: true });\n    } catch (e) {\n      res.status(401).send();\n      return;\n    }\n  },\n  preHandler: async (req, res) => {\n    assert(req.jwtUser);\n\n    const user = await userRepo.findById(prismaClient, req.jwtUser.sub);\n\n    if (user === null) {\n      res.status(401).send();\n      return;\n    }\n\n    req.user = user;\n  },\n}));\n"
  },
  {
    "source": "server/api/private/index.ts",
    "content": "import type { DefineMethods } from 'aspida';\n\nexport type Methods = DefineMethods<{\n  get: {\n    resBody: string;\n  };\n}>;\n"
  },
  {
    "source": "server/api/private/me/controller.ts",
    "content": "import { userUseCase } from '$/domain/useCase/userUseCase';\nimport assert from 'assert';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  post: {\n    hooks: {\n      preValidation: async (req) => {\n        assert(req.jwtUser);\n\n        await userUseCase.findOrCreate(req.jwtUser);\n      },\n    },\n    handler: ({ user }) => ({ status: 200, body: user }),\n  },\n}));\n"
  },
  {
    "source": "server/api/private/me/index.ts",
    "content": "import type { UserModel } from '$/api/@types/models';\nimport type { DefineMethods } from 'aspida';\n\nexport type Methods = DefineMethods<{\n  post: {\n    resBody: UserModel;\n  };\n}>;\n"
  },
  {
    "source": "server/api/private/tasks/controller.ts",
    "content": "import { taskUseCase } from '$/domain/useCase/taskUseCase';\nimport { z } from 'zod';\nimport { defineController, multipartFileValidator } from './$relay';\n\nexport default defineController(() => ({\n  post: {\n    validators: {\n      body: z.object({ label: z.string(), image: multipartFileValidator().optional() }),\n    },\n    handler: async ({ user, body }) => ({\n      status: 201,\n      body: await taskUseCase.create(user, body.label, body.image),\n    }),\n  },\n  patch: {\n    validators: {\n      body: z.object({\n        taskId: z.string(),\n        done: z.boolean(),\n        label: z.string(),\n      }),\n    },\n    handler: async ({ user, body }) => {\n      const task = await taskUseCase.update(user, body.taskId, body.done, body.label);\n\n      return { status: 204, body: task };\n    },\n  },\n  delete: async ({ user, body }) => {\n    await taskUseCase.delete(user, body.taskId);\n\n    return { status: 204 };\n  },\n}));\n"
  },
  {
    "source": "server/api/private/tasks/index.ts",
    "content": "import type { TaskModel } from '$/api/@types/models';\nimport type { DefineMethods } from 'aspida';\n\nexport type Methods = DefineMethods<{\n  post: {\n    reqFormat: FormData;\n    reqBody: {\n      label: string;\n      image?: Blob;\n    };\n    resBody: TaskModel;\n  };\n\n  patch: {\n    reqBody: {\n      taskId: string;\n      done: boolean;\n      label: string;\n    };\n    status: 204;\n    resBody: TaskModel;\n  };\n\n  delete: {\n    reqBody: {\n      taskId: string;\n    };\n    status: 204;\n  };\n}>;\n"
  },
  {
    "source": "server/api/public/controller.ts",
    "content": "import { defineController } from './$relay';\n\nexport default defineController(() => ({\n  get: () => ({ status: 200, body: 'Hello' }),\n}));\n"
  },
  {
    "source": "server/api/public/index.ts",
    "content": "import type { DefineMethods } from 'aspida';\n\nexport type Methods = DefineMethods<{\n  get: {\n    resBody: string;\n  };\n}>;\n"
  },
  {
    "source": "server/api/public/tasks/controller.ts",
    "content": "import { taskRepo } from '$/domain/repository/taskRepo';\nimport { prismaClient } from '$/service/prismaClient';\nimport { defineController } from './$relay';\n\nexport default defineController(() => ({\n  get: async ({ query }) => ({\n    status: 200,\n    body: await taskRepo.findAll(prismaClient, query?.limit),\n  }),\n}));\n"
  },
  {
    "source": "server/api/public/tasks/index.ts",
    "content": "import type { TaskModel } from '$/api/@types/models';\nimport type { DefineMethods } from 'aspida';\n\nexport type Methods = DefineMethods<{\n  get: {\n    query?: {\n      limit?: number;\n    };\n    resBody: TaskModel[];\n  };\n}>;\n"
  },
  {
    "source": "server/api/session/controller.ts",
    "content": "import { COOKIE_NAME } from '$/service/constants';\nimport type { CookieSerializeOptions } from '@fastify/cookie';\nimport type { Methods } from '.';\nimport { defineController } from './$relay';\n\nexport type AdditionalRequest = {\n  body: Methods['post']['reqBody'];\n};\n\nconst options: CookieSerializeOptions = {\n  httpOnly: true,\n  secure: true,\n  path: '/',\n  sameSite: 'none',\n};\n\nexport default defineController(() => ({\n  post: {\n    hooks: {\n      preHandler: (req, reply, done) => {\n        const expiresIn = 60 * 60 * 24 * 5 * 1000;\n\n        reply.setCookie(COOKIE_NAME, req.body?.jwt ?? '', {\n          ...options,\n          expires: new Date(Date.now() + expiresIn),\n        });\n\n        done();\n      },\n    },\n    handler: () => {\n      return { status: 200, body: { status: 'success' } };\n    },\n  },\n  delete: {\n    hooks: {\n      preHandler: (_, reply, done) => {\n        reply.clearCookie(COOKIE_NAME, options);\n        done();\n      },\n    },\n    handler: () => {\n      return { status: 200, body: { status: 'success' } };\n    },\n  },\n}));\n"
  },
  {
    "source": "server/api/session/index.ts",
    "content": "import type { DefineMethods } from 'aspida';\n\nexport type Methods = DefineMethods<{\n  post: {\n    reqBody: { jwt: string };\n    resBody: { status: 'success' };\n  };\n  delete: {\n    resBody: { status: 'success' };\n  };\n}>;\n"
  },
  {
    "source": "client/src/pages/@components/PrivateTask/PrivateTask.module.css",
    "content": ".editGroup,\n.btnGroup {\n  display: flex;\n  gap: 8px;\n}\n\n.labelInput {\n  width: 400px;\n  padding: 2px;\n}\n\n.btn {\n  padding: 2px;\n}\n\n@media screen and (max-width: 640px) {\n  .labelInput {\n    width: 100%;\n  }\n}\n"
  },
  {
    "source": "client/src/pages/@components/PrivateTask/PrivateTask.tsx",
    "content": "import type { TaskModel } from '$/api/@types/models';\nimport { useState, type ChangeEvent } from 'react';\nimport { apiClient } from 'src/utils/apiClient';\nimport { returnNull } from 'src/utils/returnNull';\nimport styles from './PrivateTask.module.css';\n\nexport const PrivateTask = (props: { task: TaskModel; fetchTasks: () => Promise<void> }) => {\n  const { task } = props;\n  const [editingTaskId, setEditingTaskId] = useState<string>();\n  const [editingLabel, setEditingLabel] = useState('');\n  const isEditing = editingTaskId === task.id;\n\n  const editLabel = (e: ChangeEvent<HTMLInputElement>) => {\n    setEditingLabel(e.target.value);\n  };\n  const toggleDone = async () => {\n    await apiClient.private.tasks\n      .patch({ body: { taskId: task.id, done: !task.done, label: task.label } })\n      .catch(returnNull);\n    await props.fetchTasks();\n  };\n  const deleteTask = async () => {\n    await apiClient.private.tasks.delete({ body: { taskId: task.id } }).catch(returnNull);\n    await props.fetchTasks();\n  };\n  const updateTaskLabel = async () => {\n    await apiClient.private.tasks\n      .patch({ body: { taskId: task.id, done: task.done, label: editingLabel } })\n      .catch(returnNull);\n    setEditingTaskId(undefined);\n    setEditingLabel('');\n    await props.fetchTasks();\n  };\n  const startEditTask = () => {\n    setEditingTaskId(task.id);\n    setEditingLabel(task.label);\n  };\n\n  return (\n    <label>\n      <div className={styles.editGroup}>\n        <input type=\"checkbox\" checked={task.done} onChange={toggleDone} />\n        {isEditing ? (\n          <input\n            type=\"text\"\n            value={editingLabel}\n            className={styles.labelInput}\n            onChange={editLabel}\n          />\n        ) : (\n          <span>{task.label}</span>\n        )}\n      </div>\n      <div className={styles.btnGroup}>\n        <input type=\"button\" value=\"DELETE\" className={styles.btn} onClick={deleteTask} />\n        {isEditing ? (\n          <input type=\"button\" value=\"SAVE\" className={styles.btn} onClick={updateTaskLabel} />\n        ) : (\n          <input type=\"button\" value=\"EDIT\" className={styles.btn} onClick={startEditTask} />\n        )}\n      </div>\n    </label>\n  );\n};\n"
  },
  {
    "source": "client/src/pages/index.module.css",
    "content": ".container {\n  max-width: 1000px;\n  margin: 0 auto;\n}\n\n.tasks {\n  width: 600px;\n  margin: 0 auto;\n  text-align: left;\n  list-style-type: none;\n  border-right: 1px solid #eee;\n  border-left: 1px solid #eee;\n}\n\n.createTask {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  justify-content: space-between;\n  padding: 16px;\n  border-bottom: 1px solid #eee;\n}\n\n.createTaskInput {\n  width: 400px;\n  padding: 4px;\n  border: none;\n}\n\n.taskHeader {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 16px 16px 8px;\n}\n\n.authorName {\n  display: flex;\n  gap: 8px;\n  align-self: center;\n  font-size: 20px;\n  font-weight: bold;\n  color: #555;\n}\n\n.label {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 8px 16px 16px;\n  border-bottom: 1px solid #eee;\n}\n\n.label > label {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n}\n\n.postBtn {\n  display: flex;\n  align-self: flex-end;\n  padding: 2px;\n}\n\n.taskImage {\n  width: 70%;\n  border: 1px solid #eee;\n  border-radius: 8px;\n}\n\n@media screen and (max-width: 640px) {\n  .tasks {\n    width: 100%;\n    border: none;\n  }\n\n  .labelInput,\n  .createTaskInput {\n    width: 100%;\n  }\n}\n"
  },
  {
    "source": "server/api/$api.ts",
    "content": "import type { AspidaClient, BasicHeaders } from 'aspida';\nimport type { Methods as Methods_ya4k83 } from './api/private/players';\nimport type { Methods as Methods_1cpffbq } from './api/private/players/_playerId@string';\nimport type { Methods as Methods_7gju6e } from './api/private/players/_playerId@string/stats';\nimport type { Methods as Methods_1glhn3f } from './api/private/teams';\nimport type { Methods as Methods_tea9u2 } from './api/private/teams/_teamId@string';\nimport type { Methods as Methods_1x2cg9e } from './api/private/teams/_teamId@string/stats';\nimport type { Methods as Methods_4f3q6j } from './api/public/teams';\nimport type { Methods as Methods_8fle7e } from './api/public/teams/_teamId@string';\n\nconst api = <T>({ baseURL, fetch }: AspidaClient<T>) => {\n  const prefix = (baseURL === undefined ? 'http://localhost:3000' : baseURL).replace(/\\/$/, '');\n  const PATH0 = '/api/private/players';\n  const PATH1 = '/stats';\n  const PATH2 = '/api/private/teams';\n  const PATH3 = '/api/public/teams';\n  const GET = 'GET';\n  const POST = 'POST';\n  const PUT = 'PUT';\n  const DELETE = 'DELETE';\n\n  return {\n    api: {\n      private: {\n        players: {\n          _playerId: (val3: string) => {\n            const prefix3 = `${PATH0}/${val3}`;\n\n            return {\n              stats: {\n                /**\n                 * @returns Player statistics\n                 */\n                get: (option?: { config?: T | undefined } | undefined) =>\n                  fetch<Methods_7gju6e['get']['resBody'], BasicHeaders, Methods_7gju6e['get']['status']>(prefix, `${prefix3}${PATH1}`, GET, option).json(),\n                /**\n                 * @returns Player statistics\n                 */\n                $get: (option?: { config?: T | undefined } | undefined) =>\n                  fetch<Methods_7gju6e['get']['resBody'], BasicHeaders, Methods_7gju6e['get']['status']>(prefix, `${prefix3}${PATH1}`, GET, option).json().then(r => r.body),\n                $path: () => `${prefix}${prefix3}${PATH1}`,\n              },\n              /**\n               * @returns Player updated\n               */\n              put: (option: { body: Methods_1cpffbq['put']['reqBody'], config?: T | undefined }) =>\n                fetch<Methods_1cpffbq['put']['resBody'], BasicHeaders, Methods_1cpffbq['put']['status']>(prefix, prefix3, PUT, option).json(),\n              /**\n               * @returns Player updated\n               */\n              $put: (option: { body: Methods_1cpffbq['put']['reqBody'], config?: T | undefined }) =>\n                fetch<Methods_1cpffbq['put']['resBody'], BasicHeaders, Methods_1cpffbq['put']['status']>(prefix, prefix3, PUT, option).json().then(r => r.body),\n              delete: (option?: { config?: T | undefined } | undefined) =>\n                fetch<void, BasicHeaders, Methods_1cpffbq['delete']['status']>(prefix, prefix3, DELETE, option).send(),\n              $delete: (option?: { config?: T | undefined } | undefined) =>\n                fetch<void, BasicHeaders, Methods_1cpffbq['delete']['status']>(prefix, prefix3, DELETE, option).send().then(r => r.body),\n              $path: () => `${prefix}${prefix3}`,\n            };\n          },\n          /**\n           * @returns Player created\n           */\n          post: (option: { body: Methods_ya4k83['post']['reqBody'], config?: T | undefined }) =>\n            fetch<Methods_ya4k83['post']['resBody'], BasicHeaders, Methods_ya4k83['post']['status']>(prefix, PATH0, POST, option).json(),\n          /**\n           * @returns Player created\n           */\n          $post: (option: { body: Methods_ya4k83['post']['reqBody'], config?: T | undefined }) =>\n            fetch<Methods_ya4k83['post']['resBody'], BasicHeaders, Methods_ya4k83['post']['status']>(prefix, PATH0, POST, option).json().then(r => r.body),\n          $path: () => `${prefix}${PATH0}`,\n        },\n        teams: {\n          _teamId: (val3: string) => {\n            const prefix3 = `${PATH2}/${val3}`;\n\n            return {\n              stats: {\n                /**\n                 * @returns Team statistics\n                 */\n                get: (option?: { config?: T | undefined } | undefined) =>\n                  fetch<Methods_1x2cg9e['get']['resBody'], BasicHeaders, Methods_1x2cg9e['get']['status']>(prefix, `${prefix3}${PATH1}`, GET, option).json(),\n                /**\n                 * @returns Team statistics\n                 */\n                $get: (option?: { config?: T | undefined } | undefined) =>\n                  fetch<Methods_1x2cg9e['get']['resBody'], BasicHeaders, Methods_1x2cg9e['get']['status']>(prefix, `${prefix3}${PATH1}`, GET, option).json().then(r => r.body),\n                $path: () => `${prefix}${prefix3}${PATH1}`,\n              },\n              /**\n               * @returns Team updated\n               */\n              put: (option: { body: Methods_tea9u2['put']['reqBody'], config?: T | undefined }) =>\n                fetch<Methods_tea9u2['put']['resBody'], BasicHeaders, Methods_tea9u2['put']['status']>(prefix, prefix3, PUT, option).json(),\n              /**\n               * @returns Team updated\n               */\n              $put: (option: { body: Methods_tea9u2['put']['reqBody'], config?: T | undefined }) =>\n                fetch<Methods_tea9u2['put']['resBody'], BasicHeaders, Methods_tea9u2['put']['status']>(prefix, prefix3, PUT, option).json().then(r => r.body),\n              delete: (option?: { config?: T | undefined } | undefined) =>\n                fetch<void, BasicHeaders, Methods_tea9u2['delete']['status']>(prefix, prefix3, DELETE, option).send(),\n              $delete: (option?: { config?: T | undefined } | undefined) =>\n                fetch<void, BasicHeaders, Methods_tea9u2['delete']['status']>(prefix, prefix3, DELETE, option).send().then(r => r.body),\n              $path: () => `${prefix}${prefix3}`,\n            };\n          },\n          /**\n           * @returns Team created\n           */\n          post: (option: { body: Methods_1glhn3f['post']['reqBody'], config?: T | undefined }) =>\n            fetch<Methods_1glhn3f['post']['resBody'], BasicHeaders, Methods_1glhn3f['post']['status']>(prefix, PATH2, POST, option).json(),\n          /**\n           * @returns Team created\n           */\n          $post: (option: { body: Methods_1glhn3f['post']['reqBody'], config?: T | undefined }) =>\n            fetch<Methods_1glhn3f['post']['resBody'], BasicHeaders, Methods_1glhn3f['post']['status']>(prefix, PATH2, POST, option).json().then(r => r.body),\n          $path: () => `${prefix}${PATH2}`,\n        },\n      },\n      public: {\n        teams: {\n          _teamId: (val3: string) => {\n            const prefix3 = `${PATH3}/${val3}`;\n\n            return {\n              /**\n               * @returns A team object\n               */\n              get: (option?: { config?: T | undefined } | undefined) =>\n                fetch<Methods_8fle7e['get']['resBody'], BasicHeaders, Methods_8fle7e['get']['status']>(prefix, prefix3, GET, option).json(),\n              /**\n               * @returns A team object\n               */\n              $get: (option?: { config?: T | undefined } | undefined) =>\n                fetch<Methods_8fle7e['get']['resBody'], BasicHeaders, Methods_8fle7e['get']['status']>(prefix, prefix3, GET, option).json().then(r => r.body),\n              $path: () => `${prefix}${prefix3}`,\n            };\n          },\n          /**\n           * @returns A list of teams\n           */\n          get: (option?: { config?: T | undefined } | undefined) =>\n            fetch<Methods_4f3q6j['get']['resBody'], BasicHeaders, Methods_4f3q6j['get']['status']>(prefix, PATH3, GET, option).json(),\n          /**\n           * @returns A list of teams\n           */\n          $get: (option?: { config?: T | undefined } | undefined) =>\n            fetch<Methods_4f3q6j['get']['resBody'], BasicHeaders, Methods_4f3q6j['get']['status']>(prefix, PATH3, GET, option).json().then(r => r.body),\n          $path: () => `${prefix}${PATH3}`,\n        },\n      },\n    },\n  };\n};\n\nexport type ApiInstance = ReturnType<typeof api>;\nexport default api;\n"
  },
  {
    "source": "server/api/@types/index.ts",
    "content": "/* eslint-disable */\nexport type User = {\n  id: string\n  email: string\n  name: string\n}\n\nexport type Team = {\n  id: string\n  name: string\n}\n\nexport type PlayerStat = {\n  id: string\n  userId: string\n  battingAverage: number\n  homeRuns: number\n  runsBattedIn: number\n  stolenBases: number\n}\n\nexport type TeamStat = {\n  id: string\n  teamId: string\n  wins: number\n  losses: number\n  ties: number\n}\n\nexport type TeamCreateInput = {\n  name: string\n}\n\nexport type TeamUpdateInput = {\n  name: string\n}\n\nexport type PlayerCreateInput = {\n  email: string\n  name: string\n}\n\nexport type PlayerUpdateInput = {\n  email: string\n  name: string\n}\n"
  },
  {
    "source": "server/api/api/private/players/_playerId@string/index.ts",
    "content": "/* eslint-disable */\nimport type * as Types from '../../../../@types'\n\nexport type Methods = {\n  put: {\n    status: 200\n    /** Player updated */\n    resBody: Types.User\n    reqBody: Types.PlayerUpdateInput\n  }\n\n  delete: {\n    status: 204\n  }\n}\n"
  },
  {
    "source": "server/api/api/private/players/_playerId@string/stats/index.ts",
    "content": "/* eslint-disable */\nimport type * as Types from '../../../../../@types'\n\nexport type Methods = {\n  get: {\n    status: 200\n    /** Player statistics */\n    resBody: Types.PlayerStat\n  }\n}\n"
  },
  {
    "source": "server/api/api/private/players/index.ts",
    "content": "/* eslint-disable */\nimport type * as Types from '../../../@types'\n\nexport type Methods = {\n  post: {\n    status: 201\n    /** Player created */\n    resBody: Types.User\n    reqBody: Types.PlayerCreateInput\n  }\n}\n"
  },
  {
    "source": "server/api/api/private/teams/_teamId@string/index.ts",
    "content": "/* eslint-disable */\nimport type * as Types from '../../../../@types'\n\nexport type Methods = {\n  put: {\n    status: 200\n    /** Team updated */\n    resBody: Types.Team\n    reqBody: Types.TeamUpdateInput\n  }\n\n  delete: {\n    status: 204\n  }\n}\n"
  },
  {
    "source": "server/api/api/private/teams/_teamId@string/stats/index.ts",
    "content": "/* eslint-disable */\nimport type * as Types from '../../../../../@types'\n\nexport type Methods = {\n  get: {\n    status: 200\n    /** Team statistics */\n    resBody: Types.TeamStat\n  }\n}\n"
  },
  {
    "source": "server/api/api/private/teams/index.ts",
    "content": "/* eslint-disable */\nimport type * as Types from '../../../@types'\n\nexport type Methods = {\n  post: {\n    status: 201\n    /** Team created */\n    resBody: Types.Team\n    reqBody: Types.TeamCreateInput\n  }\n}\n"
  },
  {
    "source": "server/api/api/public/teams/_teamId@string/index.ts",
    "content": "/* eslint-disable */\nimport type * as Types from '../../../../@types'\n\nexport type Methods = {\n  get: {\n    status: 200\n    /** A team object */\n    resBody: Types.Team\n  }\n}\n"
  },
  {
    "source": "server/api/api/public/teams/index.ts",
    "content": "/* eslint-disable */\nimport type * as Types from '../../../@types'\n\nexport type Methods = {\n  get: {\n    status: 200\n    /** A list of teams */\n    resBody: Types.Team[]\n  }\n}\n"
  }
]